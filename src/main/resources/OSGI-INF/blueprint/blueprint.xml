<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:jaxrs="http://cxf.apache.org/blueprint/jaxrs"
  xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
      http://cxf.apache.org/blueprint/jaxrs http://cxf.apache.org/schemas/blueprint/jaxrs.xsd">

  <jaxrs:server id="secureSvc" address="/secure">
    <jaxrs:serviceBeans>
      <ref component-id="secureService" />
    </jaxrs:serviceBeans>
    <jaxrs:providers>
      <ref component-id="authenticationFilter" />
      <ref component-id="authorizationFilter" />
    </jaxrs:providers>
  </jaxrs:server>

  <bean id="secureService" class="com.example.security.SecureService" />

  <!-- This bean ensures that a request has been authenticated before allowing it to pass. It will delegate to JAAS, using 
    contextName (defined in [karaf]/etc/user.properties). This will allow it to reuse the same authentication mechanism that 
    is being used to secure other ESB facilities, such as the remote SSH shell and the webconsole. -->
  <bean id="authenticationFilter" class="org.apache.cxf.jaxrs.security.JAASAuthenticationFilter">
    <property name="contextName" value="karaf" />
  </bean>

  <bean id="authorizationInterceptor" class="org.apache.cxf.interceptor.security.SimpleAuthorizingInterceptor">
    <property name="methodRolesMap">
      <map>
        <!-- Secure "sayHelloSecured" method with role "admin" -->
        <entry key="sayHelloSecured" value="admin" />
      </map>
    </property>
  </bean>

  <bean id="authorizationFilter" class="org.apache.cxf.jaxrs.security.SimpleAuthorizingFilter">
    <property name="interceptor" ref="authorizationInterceptor" />
  </bean>

</blueprint>
